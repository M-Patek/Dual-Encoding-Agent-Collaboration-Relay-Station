反自动化对抗：情报驱动的深度战略蓝图
核心矛盾： 脚本输入被检测 \rightarrow 浏览器前端拒绝 DOM 渲染 \rightarrow 脚本盲区。
| 战略维度 | 核心目标（治本/治标） | 理论攻击目标 (Targeted Theoretical Goals) | 情报支撑 (GitHub/Research Clues) |
|---|---|---|---|
| I. 身份重塑 | 战略一：C++ 级深度伪装 (治本) | 目标 1.1: 消除 CDP 泄露： 理论上禁用或混淆 Playwright 使用的 Chrome DevTools Protocol (CDP) 方法（如 Runtime.enable）。 | 线索： rebrowser-bot-detector (1.6), 社区讨论 CDP 泄露的严重性。 |
|  |  | 目标 1.2: 篡改底层指纹： 理论上在 JS/DOM 层面不可察觉地修改浏览器指纹（如 navigator.webdriver 设为 false，伪造 WebGL、Canvas 指纹）。 | 线索： Camoufox (1.3) 的 C++ 注入方法，undetected-chromedriver (1.4) 的实践。 |
|  | 战略八：行为节奏分析 (治本) | 目标 2.1: 轨迹与时序模拟： 理论上设计一套 马尔可夫/贝塞尔 模型，用于生成非线性的、随机化延迟的鼠标轨迹和打字节奏。 | 线索： PHC-mouse-movement-gen (1.1)，大量 stealth-automation 项目强调 human-like behavior。 |
| II. 网络欺骗 | 战略七：TLS/HTTP 仿冒 (治本) | 目标 3.1: 伪造网络握手： 理论上修改脚本发出的底层网络指纹（JA3, HTTP/2 Client Hints），确保在应用层 JS 被加载前就通过信任检查。 | 线索： Scrapfly (1.3) 和 TLS Requests 强调 JA3 指纹的重要性，以及 Multilogin 等商业工具的实现。 |
| III. 数据捕获 | 战略六：内鬼植入 (治标) | 目标 4.1: 网络流量嗅探与解析： 理论上设计一个 WebSocket/XHR 拦截器，实时捕获并解析 Gemini 服务器返回的 原始 JSON 数据包，绕过前端 DOM 渲染。 | 线索： MCP (Model Context Protocol) 生态 (1.7, 3.2) 和 stealth-browser-mcp (1.7) 提及的 network-interception。 |
|  | 战略五：像素级捕获 (治标) | 目标 5.1: 网页几何与滚动捕获： 理论上解决长回复的 精确滚动距离、滚动容器定位和 多图无缝拼接的几何学难题（您当前的挑战）。 | 线索： Gemini Vision Agent (1.5) 的实践，作为 OCR 的最终实现基础。 |
| IV. 环境控制 | 战略九：环境持久化/隔离 (治标) | 目标 6.1: 维持信任状态： 探索如何理论上保存并复用一个已被 Gemini 信任的 Session (Cookies/Local Storage)，避免每次重新触发检测。 | 线索： web-agent-master/google-search (2.2) 强调 State Files 的重要性。 |
|  |  | 目标 6.2: 远程环境租用： 探索如何利用 云端反检测浏览器（如 Scrapeless/Multilogin）的理论模型，以获得一个低成本、高信任度的远程执行环境。 | 线索： Scrapeless (3.4) 和 Anchor Browser (3.6) 等商用平台的优势分析。 |