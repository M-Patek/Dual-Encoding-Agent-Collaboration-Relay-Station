战略一（已选择）：深度指纹伪装 \bm{\rightarrow} C++ 注入与底层篡改
• 核心发现 (证据 1.3, Camoufox)： 最先进的反检测浏览器 (如 Camoufox) 不仅在 JavaScript 层面修改指纹，而是将数据拦截和修改放在 C++ 实现层面。
• 理论突破口： 这意味着，我们不能只满足于 playwright-stealth 在 JS 运行时的修补。要达到最高级别的伪装，我们需要探索如何理论上在 Playwright/Chromium 的 C++ 核心中篡改指纹，从而使修改无法被任何 JS 检测手段 (如 Object.getOwnPropertyNames(navigator)) 所发现。
• 新检测点 (证据 1.1, 1.6)： 深入分析 Gemini 可能检测的更底层缺陷，例如 CDP (Chrome DevTools Protocol) 泄露（Runtime.enable）和 Source URL 泄露。
战略二：行为生物识别 \bm{\rightarrow} 轨迹与节奏模拟
• 核心发现 (证据 1.1, Ghost-Cursor)： 社区项目专注于生成 Bezier 曲线鼠标移动和 人类节奏的输入。
• 理论突破口： 反自动化系统（特别是 Datadome 等）会通过 行为生物识别 来评估用户的“人”性分数。我们需要理论上设计一套**“人类行为规范”**，包括：
1. 输入节奏： 随机的 keydown 到 keyup 延迟，以及字符间的随机打字速度。
2. 目标定位： 模拟鼠标从当前位置到目标输入框的非直线、加速/减速移动轨迹。
战略三：环境分离与虚拟化 \bm{\rightarrow} 操作系统层面的欺骗
• 核心发现 (证据 1.1, 1.3)： 反检测浏览器强调在 Virtual Machine (VM) 中改变屏幕分辨率、时区、语言和 WebRTC IP。
• 理论突破口： 反自动化系统会检查您的物理环境。即使 Playwright 伪造了浏览器参数，系统仍可能通过 JS 工作线程（Web Worker）访问到真实的 系统时区 或 硬件并发数 (navigator.hardwareConcurrency)。
• 探索： 如何理论上在不使用完整 VM 的前提下，通过容器化技术 (如 Docker) 或操作系统层面的钩子来伪造这些底层的、非浏览器相关的环境参数。
战略四：高权限数据获取 (原路径二/六) \bm{\rightarrow} DOM 下采样与结构化
• 核心发现 (证据 2.3, 2.4)： 许多 LLM Agent 放弃了截图，转而使用 DOM 快照，并通过 D2Snap 等算法对 DOM 进行下采样和扁平化。
• 理论突破口： 这解决了“DOM 太大，Token不够”的问题。如果 Gemini 的回复是隐藏在 DOM 某个角落的，我们不应该搜索整个 DOM，而是应该设计一个理论上的 “DOM 下采样分析仪”，专门提取文本输入/输出附近的、被隐藏的、但包含文本内容的元素。